// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mockgen is a generated GoMock package.
package mockgen

import (
	reflect "reflect"

	entities "github.com/eneassena10/estoque-go/internal/domain/product/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockIProductRepository is a mock of IProductRepository interface.
type MockIProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIProductRepositoryMockRecorder
}

// MockIProductRepositoryMockRecorder is the mock recorder for MockIProductRepository.
type MockIProductRepositoryMockRecorder struct {
	mock *MockIProductRepository
}

// NewMockIProductRepository creates a new mock instance.
func NewMockIProductRepository(ctrl *gomock.Controller) *MockIProductRepository {
	mock := &MockIProductRepository{ctrl: ctrl}
	mock.recorder = &MockIProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductRepository) EXPECT() *MockIProductRepositoryMockRecorder {
	return m.recorder
}

// CreateProducts mocks base method.
func (m *MockIProductRepository) CreateProducts(product *entities.ProductRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProducts", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProducts indicates an expected call of CreateProducts.
func (mr *MockIProductRepositoryMockRecorder) CreateProducts(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProducts", reflect.TypeOf((*MockIProductRepository)(nil).CreateProducts), product)
}

// DeleteProducts mocks base method.
func (m *MockIProductRepository) DeleteProducts(product *entities.ProductRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProducts", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProducts indicates an expected call of DeleteProducts.
func (mr *MockIProductRepositoryMockRecorder) DeleteProducts(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProducts", reflect.TypeOf((*MockIProductRepository)(nil).DeleteProducts), product)
}

// GetProductsAll mocks base method.
func (m *MockIProductRepository) GetProductsAll() *[]entities.ProductRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsAll")
	ret0, _ := ret[0].(*[]entities.ProductRequest)
	return ret0
}

// GetProductsAll indicates an expected call of GetProductsAll.
func (mr *MockIProductRepositoryMockRecorder) GetProductsAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsAll", reflect.TypeOf((*MockIProductRepository)(nil).GetProductsAll))
}

// GetProductsOne mocks base method.
func (m *MockIProductRepository) GetProductsOne(product *entities.ProductRequest) *entities.ProductRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsOne", product)
	ret0, _ := ret[0].(*entities.ProductRequest)
	return ret0
}

// GetProductsOne indicates an expected call of GetProductsOne.
func (mr *MockIProductRepositoryMockRecorder) GetProductsOne(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsOne", reflect.TypeOf((*MockIProductRepository)(nil).GetProductsOne), product)
}

// UpdateProductsCount mocks base method.
func (m *MockIProductRepository) UpdateProductsCount(oldProduct, product *entities.ProductRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductsCount", oldProduct, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductsCount indicates an expected call of UpdateProductsCount.
func (mr *MockIProductRepositoryMockRecorder) UpdateProductsCount(oldProduct, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductsCount", reflect.TypeOf((*MockIProductRepository)(nil).UpdateProductsCount), oldProduct, product)
}
